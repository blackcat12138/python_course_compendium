一、面向对象的相关概述
    面向对象(OOP)：是一种编程设计思想,可以使代码更加灵活,能够提高代码的复用性。
        对象(object)：表示任意存在的食物,万物皆对象。被分为动态和静态两个部分组成分别指的是属性和行为。
        类(class)：具体相同属性和行为的一类实体,用于封装对象的属性和行为的。
    面向对象的特征：封装、继承、多态
        封装：将对象的属性和行为封装作为类。
        继承：将父类属性和行为继承给子类,同时在子类中添加特有的属性和行为。
        多态：将父类对象应用于子类的特征。
二、类
    在使用类时需定义类,然后创建类的实例,通过实例可以访问类中的属性和方法。
    1.类的定义与实例化
      (a).定义类,使用class关键字,语法格式如下：
                class ClassName[(父类)]:
                    '''类文档字符串'''
                   属性:特征
                   方法:动作
            例如：
                class Geese:
                    '''大雁类'''
                    pass
      (b).创建类的实例,即实例化该类的对象,语法格式如下：
                ClassName(可选参数)
            例如:
                wdgse=Geese()
                print(wdgse)
三、方法
    1.创建__init__()方法
        (a).__init__()：初始化方法,类型java中的构造方法,
                    其中包含一个self参数用于访问类中的属性和方法。(self参数是必须存在的)
            例如：
                class Geese:
                    '''大雁类'''
                     def __init__(self):
                        print('我是大雁类！')
                wildGoose=Geese()
                # 输出结果：我是大雁类！
            结论：从上面案例中在初始化方法中没有指定参数,但还是会自动执行。
        (b).初始化方法可以自定义一些参数,参数间可以用逗号分隔。
     2.创建类的成员并访问
        类成员：主要由实例方法和数据成员组成,创建后可以通过类的实例进行访问。
        (a).创建实例方法
            实例方法：在类中定义的函数,是一种在类的实例上操作的函数,
                     其中第一个参数必须为self参数必须包含该参数。
                    实例方法是实现类中的一个行为,是类的一部分。
            语法格式：def functionName(self,[可选参数]):
                            [方法体]
        (b).实例方法的访问
                [类的实例化名称].functionName([可选参数])
     3.创建数据成员并访问
         数据成员：类中定义的变量就是属性,根据定义的位置分为类属性和实例属性。
         类属性：定义在类中函数体外的属性,所有实例化的对象中公用,可以通过类名称或实例名访问。
         实例属性：定义在类中的方法中的属性,只作用于当前实例中。只能通过实例名访问,不能通过类名访问实例属性。
三、封装
    1.访问权限
        在类中定义的属性和方法,在类的外部可以直接调用属性或方法来操作数据。
        而为了隐藏类内部逻辑,需要对属性和方法的访问权限进行限制。
        可以对象属性或方法名前面添加'__'双下划线,表示私有类型的成员,只允许定义该方法的类本身进行访问。
            而前面添加'_'单下划线,表示保护类型的成员,只允许类本身和子类进行访问。
    2.属性(property)
        (a).当在类中的方法上@property(装饰器),则表示将一个方法转换为属性,
            这样可以通过方法名来访问方法。转换后的属性不能重新赋值。
        (b).可以将私有属性在类体外读取且不被修改,就需定义装饰器并返回私有属性值,类体外通过对象.方法名进行读取。
 四、继承
    1.子类继承父类的特殊方法和属性,提高代码的复用性。
    2.当父类中的某个方法不适用于子类,就可以重写父类的方法。
    3.在子类中定义的__init__()方法时,不会调用父类的__init__()方法。
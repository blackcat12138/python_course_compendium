一、字符串的操作
    1.字符串的拼接,通过'+'运算符号实现拼接字符串,若其他数据类型需通过str()函数转换后才能拼接。
    2.计算字符串长度,默认情况下python采用utf-8编码,一个汉字占3个字节,一个字符占1个字节。
      通过len()函数统计字符串长度。
    3.截取字符串,字符串属于序列,可以通过切片的方式实现截取。
    4.分割字符串,通过split()函数实现分割字符串。
        str.split(seq,maxsplit)
                 seq：指定分割符,可以包含多个字符,默认为None,即所有空字符(包括空格、换行"\n"、制表符"\t"等)
            maxsplit：可选参数,指定分割的次数,若不指定则为-1,分割次数无限制.
    5.合并字符串,将多个字符串采用固定的分隔符连接在一起。
        str.join(iterable)
           str：字符串类型,指定合并时的分割符。
           iterable：可迭代对象(所有元素)。
二、字符串的相关函数
    1.检索字符串
        count()：检索指定字符串在另一个字符串中出现的次数,
                 若检索的字符串不存在,则返回0,否则返回出现的次数。
        find()：检索是否包含指定的子字符串。若检索的字符串不存在,
                  则返回-1,否则返回首次出现改子字符串时的索引。
        index()：检索是否包含指定的子字符串,若检索的字符串不存在时抛出异常。
        startswith()：检索字符串是否以指定子字符串开头,若是则返回True,否则返回False。
        endswith()：检索字符串是否以指定子字符串结尾,若是则返回True,否则返回False。
    2.字母大小写转换
        lower()：将字符串中的大写字母转换为小写字母,若无大写字母按原样返回。
        upper()：将字符串中的小写字母转换为大写字母,若无小写字母按原样返回。
    3.去除字符串中的空格和特殊字符
         strip()：用于去掉字符串左、右两侧的空格和特殊字符。
        lstrip()：用于去掉字符串左侧的空格和特殊字符。
        rstrip()：用于去掉字符串右侧的空格和特殊字符。
    4.字符串编码转换
        encode()：用于将字符串转换为二进制数据(bytes),即编码。
        decode()：将二进制数据(bytes)转为字符串,即解码。
三、格式化字符串
    1.使用'%'操作符,格式化字符串
    2.使用字符串对象的format()函数(推荐使用)
        str.format(args)
            str：指定字符串的样式(即模板)。
            args：指定要转换的项,若有多项,则用逗号进行分隔。
四、正则表达式语法
    1.行定位符：用于描述字符串的边界,'^'符号表示行的开始,'$'符号表示行的结尾。
    2.元字符,如下：
        .   匹配除换行符以外的任意字符
        \w  匹配字母、数字、下划线或汉字
        \s  匹配单个的空白符（包括Tab键和换行符）
        \b  匹配单词的开始或结束,单词的分界符通常是空格,标点符号或者换行
        \d  匹配数字
    3.限定符,如匹配8位qq号,可以通过限定符指定数量的字符：^\d{8}$
        ?   匹配前面的字符零次或一次
        *   匹配前面的字符零次或多次
       {n}  匹配前面的字符n次
      {n,m} 匹配前面的字符最少n次，最多m次
      使用正则方式匹配身份证号码：(^\d{15}$)|(^\d{18}$)|(^\d{17})(\d|X|x)$
五、正则对字符串的操作
    1.通过正则匹配字符串
      re.match(pattern,string,[flags])：从字符串的开始处进行匹配,
                                如果在起始位置匹配成功,则返回Match对象,否则返回None。
                pattern：表示模式字符串。
                string：表示要匹配的字符串。
                flags：可选参数,表示标志位,用于控制匹配方式。
      re.search(pattern,string,[flags])：用于在整个字符串中搜索第一个匹配的值,
                                如果匹配成功,则返回Match对象,否则返回None。
      re.findall(pattern,string,[flags])：用于在整个字符串中搜索所有符合正则表达式的字符串,并以列表的形式返回。
                                          如果匹配成功,则返回包含匹配结构的列表,否则返回空列表。
    2.通过正则替换字符串
      re.sub(pattern,repl,string,count,flags)：用于实现字符串替换。
            pattern：表示模式字符串,由要匹配的正则表达式转换而来。
               repl：表示替换的字符串。
             string：表示要被查找替换的原始字符串。
              count：可选参数,表示模式匹配后替换的最大次数,默认值为0,表示替换所有的匹配。
              flags：可选参数,表示标志位,用于控制匹配方式,如是否区分字母大小写。
    3.通过正则分割字符串
      re.split(pattern,string,[maxsplit],[flags])：用于实现根据正则表达式分割字符串,并以列表的形式返回。
                pattern：表示模式字符串，由要匹配的正则表达式转换而来。
                 string：表示要匹配的字符串。
               maxsplit：可选参数，表示最大的拆分次数。
                  flags：可选参数,表示标志位,用于控制匹配方式,如是否区分字母大小写。